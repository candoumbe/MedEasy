@page "/register"
@inject IIdentityApi LoginService
@namespace MedEasy.Web.Pages
@inject NavigationManager NavigationService
@inject ILocalStorageService LocalStorage
@using Identity.Models.v2


<BSForm Model="RegisterForm" OnValidSubmit="(async () => await RegisterAccount())">
    <DataAnnotationsValidator/>
    <BSAlert IsDismissible="true">
        <ValidationSummary />
    </BSAlert>
    <BSAlert IsDismissible="true" IsOpen="!string.IsNullOrWhiteSpace(RegisterAccountErrorText)">
        @RegisterAccountErrorText
    </BSAlert>
    
    <BSFormGroup IsRow="true">
        <BSLabel>Login</BSLabel>
        <BSInput ValueExpression="() => RegisterForm.Name" />
        <BSFormFeedback For="() => RegisterForm.Name">
            <ValidationMessage For="() => RegisterForm.Name"/>
        </BSFormFeedback>
    </BSFormGroup>
    
    <BSFormGroup IsRow="true">
        <BSLabel>Email</BSLabel>
        <BSInput ValueExpression="() => RegisterForm.Email" InputType="InputType.Email"/>
        <BSFormFeedback For="() => RegisterForm.Email">
            <ValidationMessage For="() => RegisterForm.Email"/>
        </BSFormFeedback>
    </BSFormGroup>

    <BSFormGroup  IsRow="true">
        <BSFormLabel>Password</BSFormLabel>
        <BSInput ValueExpression="() => RegisterForm.Password" InputType="InputType.Password"/>
        <BSFormLabel>Confirm password</BSFormLabel>
        <BSInput ValueExpression="() => RegisterForm.ConfirmPassword" InputType="InputType.Password"/>
        <BSFormFeedback For="() => RegisterForm.ConfirmPassword">
            <ValidationMessage For="() => RegisterForm.ConfirmPassword" />
        </BSFormFeedback>
    </BSFormGroup>

    <BSFormGroup IsRow="true" >
        <BSButton ButtonType="ButtonType.Submit">Register</BSButton>
        <BSButton ButtonType="ButtonType.Link" OnClick="GoToLoginPage">Don't have an account ?</BSButton>
    </BSFormGroup>
</BSForm>


@code{
    private Identity.Models.RegisterModel RegisterForm { get; set; } = new Identity.Models.RegisterModel();

    public string RegisterAccountErrorText { get; set; }

    private async Task RegisterAccount()
    {
        ApiResponse<BearerTokenModel> response = await LoginService.Register(RegisterForm);

        if (response.IsSuccessStatusCode)
        {
            await LocalStorage.SetItemAsync("bearer", response.Content);
            NavigationService.NavigateTo("/home");
        }
        else
        {
            RegisterAccountErrorText = response.ReasonPhrase;

        }
    }


    private void GoToLoginPage() => NavigationService.NavigateTo("/login");



}