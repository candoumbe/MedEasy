// <auto-generated />
using System;
using Identity.DataStores.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Identity.DataStores.SqlServer.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20190815194846_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Identity.Objects.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("RefreshToken");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .IsConcurrencyToken();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Identity.Objects.AccountClaim", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("ClaimId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset?>("End");

                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset>("Start");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .IsConcurrencyToken();

                    b.Property<string>("Value");

                    b.HasKey("AccountId", "ClaimId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("AccountId", "ClaimId", "Start", "End")
                        .IsUnique()
                        .HasFilter("[End] IS NOT NULL");

                    b.ToTable("AccountClaim");
                });

            modelBuilder.Entity("Identity.Objects.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .IsConcurrencyToken();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("Identity.Objects.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Identity.Objects.RoleClaim", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("ClaimId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .IsConcurrencyToken();

                    b.HasKey("RoleId", "ClaimId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ClaimId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Identity.Objects.Account", b =>
                {
                    b.HasOne("Identity.Objects.Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Identity.Objects.AccountClaim", b =>
                {
                    b.HasOne("Identity.Objects.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Identity.Objects.Claim", "Claim")
                        .WithMany("Users")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Objects.Role", b =>
                {
                    b.HasOne("Identity.Objects.Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Identity.Objects.RoleClaim", b =>
                {
                    b.HasOne("Identity.Objects.Claim", "Claim")
                        .WithMany("Roles")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Identity.Objects.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
