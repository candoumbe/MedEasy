// <auto-generated />
using System;
using Measures.DataStores;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Measures.DataStores.Sqlite.Migrations
{
    [DbContext(typeof(MeasuresStore))]
    [Migration("20210513195327_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("Measures.Objects.BloodPressure", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfMeasure")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<float>("DiastolicPressure")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("Id")
                        .HasColumnType("TEXT");

                    b.Property<float>("SystolicPressure")
                        .HasColumnType("REAL");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("PatientId", "DateOfMeasure");

                    b.HasIndex("Id");

                    b.ToTable("BloodPressure");
                });

            modelBuilder.Entity("Measures.Objects.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Measures.Objects.Temperature", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfMeasure")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("PatientId", "DateOfMeasure");

                    b.HasIndex("Id");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("Measures.Objects.BloodPressure", b =>
                {
                    b.HasOne("Measures.Objects.Patient", "Patient")
                        .WithMany("BloodPressures")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Measures.Objects.Temperature", b =>
                {
                    b.HasOne("Measures.Objects.Patient", "Patient")
                        .WithMany("Temperatures")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Measures.Objects.Patient", b =>
                {
                    b.Navigation("BloodPressures");

                    b.Navigation("Temperatures");
                });
#pragma warning restore 612, 618
        }
    }
}
