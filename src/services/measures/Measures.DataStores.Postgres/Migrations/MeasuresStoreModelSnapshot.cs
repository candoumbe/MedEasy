// <auto-generated />
using System;
using Measures.DataStores;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Measures.DataStores.Postgres.Migrations
{
    [DbContext(typeof(MeasuresStore))]
    partial class MeasuresStoreModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Measures.Objects.BloodPressure", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("DateOfMeasure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Instant?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("DiastolicPressure")
                        .HasColumnType("real");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.Property<float>("SystolicPressure")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Instant?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SubjectId", "DateOfMeasure");

                    b.HasIndex("Id");

                    b.ToTable("BloodPressure");
                });

            modelBuilder.Entity("Measures.Objects.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<LocalDate?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Instant?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Instant?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Measures.Objects.Temperature", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("DateOfMeasure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Instant?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Instant?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("SubjectId", "DateOfMeasure");

                    b.HasIndex("Id");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("Measures.Objects.BloodPressure", b =>
                {
                    b.HasOne("Measures.Objects.Subject", "Subject")
                        .WithMany("BloodPressures")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Measures.Objects.Temperature", b =>
                {
                    b.HasOne("Measures.Objects.Subject", "Subject")
                        .WithMany("Temperatures")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Measures.Objects.Subject", b =>
                {
                    b.Navigation("BloodPressures");

                    b.Navigation("Temperatures");
                });
#pragma warning restore 612, 618
        }
    }
}
